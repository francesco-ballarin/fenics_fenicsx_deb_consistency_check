name: CI

on:
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - main
  schedule:
    - cron: "0 0 * * WED"
  workflow_dispatch:
    inputs:
      index:
        description: "The package index, e.g. PyPI or TestPyPI, from which to install the package. If empty, the package will not be installed from any package index, but from the current git clone"
      index_version:
        description: "The version of the package to be installed from the package index. If empty, the latest version will be installed. Only used when index is non empty."
  workflow_call:
    inputs:
      ref:
        description: "The branch, tag or SHA to checkout"
        type: string
      index:
        description: "The package index, e.g. PyPI or TestPyPI, from which to install the package. If empty, the package will not be installed from any package index, but from the current git clone"
        type: string
      index_version:
        description: "The version of the package to be installed from the package index. If empty, the latest version will be installed. Only used when index is non empty."
        type: string

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - name: python-3.8
            python-version: "3.8"
          - name: python-3.9
            python-version: "3.9"
          - name: python-3.10
            python-version: "3.10"
          - name: python-3.11
            python-version: "3.11"
          - name: python-3.12
            python-version: "3.12"
          - name: debian
            container: debian:testing
          - name: conda
            container: continuumio/miniconda3
      fail-fast: false
    name: ${{ matrix.name }}
    container: ${{ matrix.container }}
    steps:
      - name: Install git
        if: matrix.name == 'debian'
        run: |
          apt update -y -q
          apt install -y -qq git
      - name: Mark workspace as safe
        run: |
          git config --global --add safe.directory "${GITHUB_WORKSPACE}"
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
      - name: Install dependencies (default GitHub actions image)
        if: startsWith(matrix.name, 'python-') == true
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies (debian image)
        if: matrix.name == 'debian'
        run: |
          export DEBIAN_FRONTEND="noninteractive"
          apt -y -q update
          apt install -y -qq python3-pip python3-virtualenv
      - name: Install dependencies (conda image)
        if: matrix.name == 'conda'
        run: |
          conda install -y pip virtualenv
      - name: Determine default flags for pip install
        id: determine_pip_install_default_flags
        run: |
          if [[ "${{ matrix.name }}" == "debian" ]]; then
            echo "pip_install_default_flags=--break-system-packages" >> ${GITHUB_OUTPUT}
          else
            echo "pip_install_default_flags=" >> ${GITHUB_OUTPUT}
          fi
        shell: bash
      - name: Wait for package index availability (PyPI and TestPyPI only)
        if: (inputs || github.event.inputs).index != '' && (inputs || github.event.inputs).index_version != ''
        run: |
          INDEX=${{ (inputs || github.event.inputs).index }}
          INDEX_VERSION=${{ (inputs || github.event.inputs).index_version }}
          PIP_INSTALL_DEFAULT_FLAGS=${{ steps.determine_pip_install_default_flags.outputs.pip_install_default_flags }}
          PACKAGE_NAME="pusimp"
          if [[ "${INDEX}" == "TestPyPI" ]]; then
            INDEX_URL=https://test.pypi.org
          elif [[ "${INDEX}" == "PyPI" ]]; then
            INDEX_URL=https://pypi.org
          else
            echo "Invalid package index" && exit 1
          fi
          COUNTER=0
          INDEX_VERSION_FOUND=0
          while [[ ${INDEX_VERSION_FOUND} -ne 1 ]]; do
            pip install ${PIP_INSTALL_DEFAULT_FLAGS} --no-cache-dir --index-url ${INDEX_URL}/simple/ ${PACKAGE_NAME}== 2> all_${PACKAGE_NAME}_versions || true
            if grep -q ${INDEX_VERSION} all_${PACKAGE_NAME}_versions; then
              INDEX_VERSION_FOUND=1
            fi
            [[ ${INDEX_VERSION_FOUND} -ne 1 && ${COUNTER} -eq 5 ]] && echo "Giving up on finding version ${INDEX_VERSION} on ${INDEX_URL}" && exit 1
            [[ ${INDEX_VERSION_FOUND} -ne 1 ]] && echo "Cannot find version ${INDEX_VERSION} on ${INDEX_URL}, attempt ${COUNTER}: trying again after a short pause" && sleep 10
            [[ ${INDEX_VERSION_FOUND} -eq 1 ]] && echo "Found version ${INDEX_VERSION} on ${INDEX_URL}, attempt ${COUNTER}"
            COUNTER=$((COUNTER+1))
          done
        shell: bash
      - name: Install pusimp (PyPI and TestPyPI only)
        if: (inputs || github.event.inputs).index != ''
        run: |
          INDEX=${{ (inputs || github.event.inputs).index }}
          INDEX_VERSION=${{ (inputs || github.event.inputs).index_version }}
          PIP_INSTALL_DEFAULT_FLAGS=${{ steps.determine_pip_install_default_flags.outputs.pip_install_default_flags }}
          PACKAGE_NAME="pusimp"
          if [[ "${INDEX}" == "TestPyPI" ]]; then
            INDEX_FLAGS="--no-cache-dir --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/"
          elif [[ "${INDEX}" == "PyPI" ]]; then
            INDEX_FLAGS="--no-cache-dir"
          else
            echo "Invalid package index" && exit 1
          fi
          if [[ -n "${INDEX_VERSION}" ]]; then
            PACKAGE_VERSION="==${INDEX_VERSION}"
            echo "Installing version ${INDEX_VERSION} from ${INDEX}"
          else
            PACKAGE_VERSION=""
            echo "Installing latest version from ${INDEX}"
          fi
          python3 -m pip install ${PIP_INSTALL_DEFAULT_FLAGS} ${INDEX_FLAGS} ${PACKAGE_NAME}[lint,tests]${PACKAGE_VERSION}
        shell: bash
      - name: Install pusimp (git clone only)
        if: (inputs || github.event.inputs).index == ''
        run: |
          PIP_INSTALL_DEFAULT_FLAGS=${{ steps.determine_pip_install_default_flags.outputs.pip_install_default_flags }}
          python3 -m pip install ${PIP_INSTALL_DEFAULT_FLAGS} .[lint,tests]
      - name: Install pusimp test data
        run: |
          PIP_INSTALL_DEFAULT_FLAGS=${{ steps.determine_pip_install_default_flags.outputs.pip_install_default_flags }}
          find tests/data -mindepth 1 -maxdepth 1 -type d -exec python3 -m pip install ${PIP_INSTALL_DEFAULT_FLAGS} {} \;
      - name: Clean build files
        run: |
          git clean -xdf
      - name: Run ruff
        run: |
          python3 -m ruff .
      - name: Run isort
        run: |
          python3 -m isort --check --diff .
      - name: Run mypy
        run: |
          python3 -m mypy .
      - name: Run yamllint
        run: |
          python3 -m yamllint -d "{extends: default, rules: {document-start: {present: false}, line-length: disable, truthy: {check-keys: false}}}" .
      - name: Run tests
        run: |
          python3 -m coverage run --source=pusimp -m pytest -vv tests/unit
      - name: Check test coverage
        run: |
          python3 -m coverage report --fail-under=100 --show-missing --skip-covered

  warn:
    runs-on: ubuntu-latest
    if: github.repository == 'python-pusimp/pusimp' && github.ref == 'refs/heads/main' && github.event_name == 'schedule'
    steps:
      - name: Warn if scheduled workflow is about to be disabled
        uses: fem-on-colab/warn-workflow-about-to-be-disabled-action@main
        with:
          workflow-filename: ci.yml
          days-elapsed: 50
