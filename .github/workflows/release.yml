name: Release new version

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version number, without v prefix"

jobs:
  prepare_branches:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.REPO_ACCESS_TOKEN }}
      - name: Configure username and email
        run: |
          git config user.name "GitHub Actions"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
      - name: Verify that there is no tag with the same version number
        run: |
          VERSION=${{ github.event.inputs.version }}
          if [[ -n $(git ls-remote --tags origin v${VERSION}) ]]; then
            echo "A v${VERSION} tag already exists" && exit 1
          fi
        shell: bash
      - name: Delete existing branches
        run: |
          VERSION=${{ github.event.inputs.version }}
          for BRANCH_NAME in pre${VERSION} v${VERSION} post${VERSION}; do
            if [[ -n $(git branch --list ${BRANCH_NAME}) ]]; then
              git branch -D ${BRANCH_NAME}
            fi
            if [[ -n $(git ls-remote --heads origin ${BRANCH_NAME}) ]]; then
              git push origin -d ${BRANCH_NAME}
            fi
          done
        shell: bash
      - name: Prepare branch pre release
        run: |
          VERSION=${{ github.event.inputs.version }}
          PRE_BRANCH_NAME=pre${VERSION}
          git checkout -b ${PRE_BRANCH_NAME}
          git push origin ${PRE_BRANCH_NAME}
      - name: Prepare branch for release
        run: |
          VERSION=${{ github.event.inputs.version }}
          RELEASE_BRANCH_NAME=v${VERSION}
          git checkout -b ${RELEASE_BRANCH_NAME}
          find . -type f -name pyproject.toml -exec sed -i "s|version = \".*\"|version = \"${VERSION}\"|g" {} \;
          git add .
          git commit -m "Bump version to ${VERSION}"
          git push origin ${RELEASE_BRANCH_NAME}
      - name: Prepare branch post release
        run: |
          VERSION=${{ github.event.inputs.version }}
          POST_BRANCH_NAME=post${VERSION}
          DEV_VERSION=$(echo ${VERSION} | awk -F. -v OFS=. '{$NF="dev"$NF+1;print}')
          git checkout -b ${POST_BRANCH_NAME}
          find . -type f -name pyproject.toml -exec sed -i "s|version = \"${VERSION}\"|version = \"${DEV_VERSION}\"|g" {} \;
          git add .
          git commit -m "Reset version number to ${DEV_VERSION} after release"
          git push origin ${POST_BRANCH_NAME}

  test_branch_pre_release_installing_from_github:
    needs: [prepare_branches]
    uses: python-pusimp/pusimp/.github/workflows/ci.yml@main
    with:
      ref: pre${{ github.event.inputs.version }}

  test_branch_for_release_installing_from_github:
    needs: [prepare_branches]
    uses: python-pusimp/pusimp/.github/workflows/ci.yml@main
    with:
      ref: v${{ github.event.inputs.version }}

  test_branch_post_release_installing_from_github:
    needs: [prepare_branches]
    uses: python-pusimp/pusimp/.github/workflows/ci.yml@main
    with:
      ref: post${{ github.event.inputs.version }}

  publish_release_to_testpypi:
    needs: [test_branch_pre_release_installing_from_github, test_branch_for_release_installing_from_github, test_branch_post_release_installing_from_github]
    uses: python-pusimp/pusimp/.github/workflows/pypi.yml@main
    with:
      ref: v${{ github.event.inputs.version }}
      index: TestPyPI
    secrets:
      TEST_PYPI_TOKEN: ${{ secrets.TEST_PYPI_TOKEN }}

  publish_release_to_pypi:
    needs: [publish_release_to_testpypi]
    uses: python-pusimp/pusimp/.github/workflows/pypi.yml@main
    with:
      ref: v${{ github.event.inputs.version }}
      index: TestPyPI
    secrets:
      TEST_PYPI_TOKEN: ${{ secrets.TEST_PYPI_TOKEN }}

  push_to_repo_and_cleanup:
    needs: [publish_release_to_pypi]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.REPO_ACCESS_TOKEN }}
      - name: Delete branch pre release
        run: |
          VERSION=${{ github.event.inputs.version }}
          PRE_BRANCH_NAME=pre${VERSION}
          git push origin -d ${PRE_BRANCH_NAME}
      - name: Replace branch for release with a tag
        run: |
          VERSION=${{ github.event.inputs.version }}
          RELEASE_BRANCH_NAME=v${VERSION}
          BACKUP_HEAD=$(git rev-parse HEAD)
          git checkout ${RELEASE_BRANCH_NAME}
          RELEASE_BRANCH_NAME_HEAD=$(git rev-parse HEAD)
          git checkout ${BACKUP_HEAD}
          git branch -D ${RELEASE_BRANCH_NAME}
          git push origin -d ${RELEASE_BRANCH_NAME}
          git tag ${RELEASE_BRANCH_NAME} ${RELEASE_BRANCH_NAME_HEAD}
          git push origin ${RELEASE_BRANCH_NAME}
      - name: Merge branch post release with the branch from which this workflow was called
        run: |
          VERSION=${{ github.event.inputs.version }}
          POST_BRANCH_NAME=post${VERSION}
          CALLING_BRANCH_NAME=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}
          git checkout ${POST_BRANCH_NAME}
          git checkout ${CALLING_BRANCH_NAME}
          git merge --ff-only ${POST_BRANCH_NAME}
          git branch -D ${POST_BRANCH_NAME}
          git push origin -d ${POST_BRANCH_NAME}
          git push origin ${CALLING_BRANCH_NAME}
